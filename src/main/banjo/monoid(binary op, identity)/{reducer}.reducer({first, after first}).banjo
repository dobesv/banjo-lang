{
  en = "
    Reduce the given collection to a single value using this monoid's
    operator and identity.
  " 
  eg = [
    monoid(.+, 0).reducer [] == 0
    monoid(.+, 0).reducer [1] == 1
    monoid(.+, 0).reducer [0,1] == 1
    monoid(.+, 0).reducer [1,1] == 2
    monoid(.+, 0).reducer [1,2,3] == 6
    monoid(.*, 1).reducer [] == 1
    monoid(.*, 1).reducer [1] == 1
    monoid(.*, 1).reducer [0,1] == 0
    monoid(.*, 1).reducer [1,1] == 1
    monoid(.*, 1).reducer [1,2,3] == 6
    monoid(.+, []).reducer [] == []
    monoid(.+, []).reducer [[1,-1]] == [1,-1]
    monoid(.+, []).reducer [[0],[1]] == [0,1]
    monoid(.+, []).reducer [[1,1],[2,2]] == [1,1,2,2]
    monoid(.+, []).reducer [[1],[2,4],[3,6,9]] == [1,2,4,3,6,9]
  ]
} ⇒ (
  # Apply the binary op to
  binary op ∘
  
  # the first element (if any) and
  first ;◄  
  
  # the result of reducing the remainder of the list (if any);
  reducer(after first) 
  
  # extract the calculated result if there is one; otherwise use the identity value for an empty list
) ?: identity