
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: "maven"
apply plugin: "osgi"

version = "0.1"
group = "banjo"
sourceCompatibility = "1.8"
archivesBaseName = "banjo.banjo-lang"

ext {
	projectTitle = "Banjo Language Tools"
	projectName = "banjo-lang"
	groupId = "banjo"
}

repositories {
	mavenLocal()
    mavenCentral()
    maven {
        url "https://repo.eclipse.org/content/repositories/eclipse-releases"
    }
}

dependencies {
	compile 'org.hamcrest:hamcrest-core:1.3'
	compile 'org.functionaljava:functionaljava-java8:4.3-SNAPSHOT'
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
	}
	test {
		java {
			srcDirs = ['test']
		}
	}
}

jar {
	version project.version
	baseName "banjo.banjo-lang"
	manifest {
		instruction 'Bundle-ActivationPolicy', 'lazy'
		instruction 'Bundle-Vendor', 'banjo'
		instruction 'Require-Bundle', 'org.functionaljava;bundle-version="[4.3,5)"'
	}
}

eclipse {
  project {
    natures 'org.eclipse.pde.PluginNature'
    buildCommand 'org.eclipse.pde.ManifestBuilder'
    buildCommand 'org.eclipse.pde.SchemaBuilder'
  }
}

// Output MANIFEST.MF statically so eclipse can see it for plugin development
task eclipsePluginManifest(dependsOn: jar) << {
  file("META-INF").mkdirs()
  jar.manifest.writeTo(file("META-INF/MANIFEST.MF"))
}

eclipseProject.dependsOn eclipsePluginManifest

task eclipseBuildProperties << {
	Properties props = new java.util.Properties()
	props.setProperty("source..",
		(sourceSets.main.java.srcDirs +
			sourceSets.test.java.srcDirs)
		.collect({org.apache.tools.ant.util.FileUtils.getRelativePath(project.projectDir, it)})
		.join(","))
	props.setProperty("src.includes",
		(sourceSets.main.java.srcDirs +
			sourceSets.test.java.srcDirs +
			["build.gradle", ".gitignore", ".gitattributes", "Readme.md", "META-INF"].collect({project.file(it)}))
		.collect({org.apache.tools.ant.util.FileUtils.getRelativePath(project.projectDir, it)})
		.join(","))
	props.setProperty("bin.includes", ([project.buildDir, "META-INF"].collect({project.file(it)}))
		.collect({org.apache.tools.ant.util.FileUtils.getRelativePath(project.projectDir, it)})
		.join(","))

	println props.toString()
	props.store(new FileWriter(project.file("build.properties")), "build.properties for eclipse.")
}

eclipseProject.dependsOn eclipseBuildProperties




