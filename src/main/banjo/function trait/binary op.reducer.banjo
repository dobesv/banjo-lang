"
   Reduce a collection to a single element using `binary op`.
   
   If the collection has two or more elements, the operator is applied in a 
   cumulative fashion to the elements of the collection to give a final single
   result.
   
   If the input collection is empty or has only one element, it is returned
   unchanged.
   
   The operator is applied in curried style: `binary op(left)(right)`.  This
   makes it compatible with operator slot selectors like `.+`
" ⇒
(usage examples = [
   (x ↦ y ↦ (x + y * y)).reducer([]) == []
   (x ↦ y ↦ (x + y * y)).reducer([1]) == [1]
   (x ↦ y ↦ (x + y * y)).reducer([1, 3]) == [10]
   (x ↦ y ↦ (x + y * y)).reducer([1, 3, 5]) == [785]
   (.+).reducer [1,2,3] == [6]
   (.*).reducer [2,2,2] == [8]
]) ⇒
({first, after first}) ↦ first ; (
  first element ↦ (binary op(first element) ∘ binary op.reducer(after first)) ?: first element
)
